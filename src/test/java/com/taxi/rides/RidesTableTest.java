/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.taxi.rides;

import static org.assertj.core.api.Assertions.assertThat;

import com.google.common.base.StandardSystemProperty;
import com.google.common.base.Stopwatch;
import com.google.common.collect.Comparators;
import com.taxi.rides.RidesTable.Settings;
import de.siegmar.fastcsv.writer.CsvWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.HashMap;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.DoubleAdder;
import java.util.concurrent.atomic.LongAdder;
import org.assertj.core.data.Offset;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

class RidesTableTest {

  private static final DateTimeFormatter DATE_FORMATTER =
      new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm:ss").toFormatter();

  @Disabled
  @Test
  void testAvgDistances1() {
    var table = new RidesTable(new Settings());
    var sw = Stopwatch.createStarted();
    table.init(Paths.get(StandardSystemProperty.USER_HOME.value() + "/Downloads/trip_data"));
    System.out.println("Init time: " + sw.elapsed(TimeUnit.SECONDS));
    sw.reset();

    sw.start();
    var res =
        table.getAverageDistances(
            LocalDateTime.of(2020, 7, 10, 0, 0), LocalDateTime.of(2020, 12, 15, 0, 0));
    System.out.println("Query time: " + sw.elapsed(TimeUnit.SECONDS));
    res.forEach((k, v) -> System.out.println(k + " : " + v));
  }

  @RepeatedTest(30)
  void testAvgDistances() throws Exception {
    var t1 =
        LocalDateTime.of(
            2020,
            ThreadLocalRandom.current().nextInt(1, 12),
            ThreadLocalRandom.current().nextInt(1, 29),
            ThreadLocalRandom.current().nextInt(0, 24),
            ThreadLocalRandom.current().nextInt(0, 60));
    var t2 =
        LocalDateTime.of(
            2020,
            ThreadLocalRandom.current().nextInt(1, 12),
            ThreadLocalRandom.current().nextInt(1, 29),
            ThreadLocalRandom.current().nextInt(0, 24),
            ThreadLocalRandom.current().nextInt(0, 60));

    var queryStartTs = Comparators.min(t1, t2);
    var queryEndTs = Comparators.max(t1, t2);
    var expected = new HashMap<Integer, AvgState>();

    var csvDir = Files.createTempDirectory("avg-dist");
    for (int i = 1; i <= 12; i++) {
      var csvFile = Files.createTempFile(csvDir, null, ".csv");
      var pickupDate =
          LocalDateTime.of(
              2020,
              i,
              ThreadLocalRandom.current().nextInt(1, 29),
              ThreadLocalRandom.current().nextInt(0, 24),
              ThreadLocalRandom.current().nextInt(0, 60));

      var dropoffDate = pickupDate.plusMinutes(ThreadLocalRandom.current().nextInt(5, 40));

      try (CsvWriter csv = CsvWriter.builder().build(csvFile)) {
        csv.writeRow(
            "VendorID",
            "tpep_pickup_datetime",
            "tpep_dropoff_datetime",
            "passenger_count",
            "trip_distance",
            "RatecodeID",
            "store_and_fwd_flag",
            "PULocationID",
            "DOLocationID",
            "payment_type",
            "fare_amount",
            "extra",
            "mta_tax",
            "tip_amount",
            "tolls_amount",
            "improvement_surcharge",
            "total_amount",
            "congestion_surcharge");
        for (int j = 0; j < 5000; j++) {
          var isNull = ThreadLocalRandom.current().nextBoolean();
          int psgCnt = ThreadLocalRandom.current().nextInt(0, 9);
          double dist = ThreadLocalRandom.current().nextDouble(0.1, 4.5);

          if (!isNull) {
            if (pickupDate.compareTo(queryStartTs) >= 0 && dropoffDate.compareTo(queryEndTs) <= 0) {
              var avgState =
                  expected.computeIfAbsent(
                      psgCnt, k -> new AvgState(new DoubleAdder(), new LongAdder()));
              avgState.sum.add(dist);
              avgState.count.increment();
            }
          }

          csv.writeRow(
              ThreadLocalRandom.current().nextInt(0, 5) + "",
              pickupDate.format(DATE_FORMATTER),
              dropoffDate.format(DATE_FORMATTER),
              isNull ? "" : psgCnt + "",
              isNull ? "" : dist + "",
              ThreadLocalRandom.current().nextInt(1, 5) + "",
              ThreadLocalRandom.current().nextBoolean()
                  ? "N"
                  : ThreadLocalRandom.current().nextBoolean() ? "Y" : "",
              "1",
              "1",
              "1",
              "1.1",
              "0.5",
              "0.5",
              "0",
              "0",
              "0.4",
              "9.0",
              "1");
        }
      }
    }

    expected.forEach((k, v) -> System.out.println(k + " : " + v));
    var table = new RidesTable(new Settings());
    table.init(csvDir);
    var res = table.getAverageDistances(queryStartTs, queryEndTs);
    expected.forEach(
        (psgCnt, avgState) ->
            assertThat(res.get(psgCnt))
                .isNotNull()
                .satisfies(
                    val ->
                        assertThat(avgState.sum.doubleValue() / avgState.count.doubleValue())
                            .isCloseTo(val, Offset.offset(0.00000001))));
  }

  record AvgState(DoubleAdder sum, LongAdder count) {}
}
